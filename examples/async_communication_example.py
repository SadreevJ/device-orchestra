#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–∏ device-orchestra.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
- –û—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.communication_factory import CommunicationFactory
from adapters.async_serial_adapter import AsyncSerialAdapter


async def demo_basic_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===")
    
    # –ê–¥–∞–ø—Ç–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ adapters/__init__.py
    print("–ê–¥–∞–ø—Ç–µ—Ä 'serial' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–±—Ä–∏–∫–µ")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    config = {
        "port": "/dev/ttyUSB0",
        "baudrate": 115200,
        "timeout": 1.0,
        "protocol_version": "2.0"
    }
    
    adapter = CommunicationFactory.create("serial", config)
    print(f"–°–æ–∑–¥–∞–Ω –∞–¥–∞–ø—Ç–µ—Ä: {type(adapter).__name__}")
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {adapter.get_config()}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É...")
        await adapter.connect()
        print(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {adapter.get_status()}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        commands = [
            ("PING", {}),
            ("STATUS", {}),
            ("MOVE", {"steps": 100, "speed": "fast"}),
            ("GET_POSITION", {})
        ]
        
        for command, params in commands:
            print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
            try:
                response = await adapter.send_command(command, **params)
                print(f"–û—Ç–≤–µ—Ç: {response}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        is_healthy = await adapter.health_check()
        print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ: {is_healthy}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        print("\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        await adapter.disconnect()
        print("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def demo_protocol_versions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    adapters = {}
    
    for version in ["1.0", "2.0", "3.0"]:
        config = {
            "port": f"/dev/ttyUSB{version.split('.')[0]}",
            "protocol_version": version
        }
        adapter = AsyncSerialAdapter(config)
        adapters[version] = adapter
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
        for version, adapter in adapters.items():
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏ {version}...")
            await adapter.connect()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        command = "MOVE"
        params = {"steps": 50}
        
        for version, adapter in adapters.items():
            print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–µ—Ä—Å–∏–∏ {version}")
            response = await adapter.send_command(command, **params)
            print(f"–û—Ç–≤–µ—Ç: {response}")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {adapter.protocol_version.value}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
        for version, adapter in adapters.items():
            print(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏ {version}...")
            await adapter.disconnect()


async def demo_error_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–æ—Ä—Ç–æ–º
    config = {
        "port": "/dev/nonexistent",
        "baudrate": 115200
    }
    
    adapter = AsyncSerialAdapter(config)
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Ä—Ç—É
    print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Ä—Ç—É...")
    try:
        await adapter.connect()
    except Exception as e:
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    try:
        await adapter.send_command("PING")
    except Exception as e:
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    status = adapter.get_status()
    print(f"–°—Ç–∞—Ç—É—Å –∞–¥–∞–ø—Ç–µ—Ä–∞: {status}")


async def demo_factory_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ñ–∞–±—Ä–∏–∫–∏."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ñ–∞–±—Ä–∏–∫–∏ ===")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã:")
    print(CommunicationFactory.list_available())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    is_registered = CommunicationFactory.is_registered("serial")
    print(f"–ê–¥–∞–ø—Ç–µ—Ä 'serial' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {is_registered}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
    config = {"port": "/dev/ttyUSB0"}
    adapter = CommunicationFactory.create("serial", config)
    print(f"–°–æ–∑–¥–∞–Ω –∞–¥–∞–ø—Ç–µ—Ä —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É: {type(adapter).__name__}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –∞–¥–∞–ø—Ç–µ—Ä–∞
    adapter_class = CommunicationFactory.get_adapter_class("serial")
    print(f"–ö–ª–∞—Å—Å –∞–¥–∞–ø—Ç–µ—Ä–∞ 'serial': {adapter_class}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
    print(f"\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞...")
    try:
        CommunicationFactory.register("test_serial", AsyncSerialAdapter)
        print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∞–¥–∞–ø—Ç–µ—Ä 'test_serial'")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        print(CommunicationFactory.list_available())
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        CommunicationFactory.unregister("test_serial")
        print("–£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 'test_serial'")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–∏ device-orchestra")
    print("=" * 60)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await demo_basic_usage()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        await demo_protocol_versions()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        await demo_error_handling()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ñ–∞–±—Ä–∏–∫–∏
        await demo_factory_features()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(main())
